{"config":{"lang":["es"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentaci\u00f3n del proyecto MVC Tienda","text":"<p>Bienvenido a la documentaci\u00f3n del proyecto MVC Tienda.</p>"},{"location":"#indice","title":"\u00cdndice","text":"<ul> <li>\ud83d\udcc2 Estructura del Proyecto<ul> <li>\ud83d\udcdc Descripci\u00f3n de la Arquitectura MVC</li> <li>\ud83d\udcc1 Estructura de Carpetas</li> </ul> </li> <li>\u2699\ufe0f Componentes del Sistema<ul> <li>\ud83d\udc41\ufe0f Control de Vistas</li> <li>\ud83d\udd00 Interacci\u00f3n entre Componentes. Implementaci\u00f3n y el uso del Router</li> <li>\ud83d\uddc2\ufe0f Componentes Espec\u00edficos del Modelo MVC. La clase Model_crud</li> <li>\ud83c\udfa8 Estilos CSS y Bootstrap</li> <li>\ud83d\udcdc La Parte de JavaScript y AJAX</li> </ul> </li> <li>\ud83d\udd12 Proteger Aplicaci\u00f3n y Directorios<ul> <li>\ud83d\udd10 El Uso de los Ficheros .env</li> </ul> </li> </ul>"},{"location":"arquitectura/","title":"\ud83d\udcdc Descripci\u00f3n de la Arquitectura MVC","text":"<p>\u2b05\ufe0f Volver </p>"},{"location":"arquitectura/#descripcion-de-la-arquitectura-mvc","title":"\ud83d\udcdc Descripci\u00f3n de la Arquitectura MVC","text":"<p>La arquitectura Modelo-Vista-Controlador (MVC) es un patr\u00f3n de dise\u00f1o ampliamente utilizado en el desarrollo de aplicaciones web. Este modelo separa la l\u00f3gica del negocio, la interfaz de usuario y la manipulaci\u00f3n de datos, permitiendo un desarrollo modular, escalable y m\u00e1s f\u00e1cil de mantener.</p> <p>En el contexto del proyecto MVC Tienda, la estructura del proyecto sigue las mejores pr\u00e1cticas para implementar MVC de manera eficiente, con una clara separaci\u00f3n de responsabilidades.</p>"},{"location":"arquitectura/#beneficios-de-la-arquitectura-mvc","title":"\ud83d\udccb Beneficios de la Arquitectura MVC","text":"<ul> <li>Modularidad: Separaci\u00f3n clara de responsabilidades.</li> <li>Escalabilidad: Facilita agregar nuevas funcionalidades.</li> <li>Mantenibilidad: El c\u00f3digo es m\u00e1s f\u00e1cil de entender y modificar.</li> <li>Reutilizaci\u00f3n de C\u00f3digo: Componentes como vistas y modelos pueden ser reutilizados en diferentes partes del proyecto.</li> </ul> Ejemplo Pr\u00e1ctico C\u00f3digoExplicaci\u00f3nArquitectura index.php<pre><code>&lt;?php\nrequire_once('config.php');\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse Dotenv\\Dotenv;\n\n// Detectar el entorno actual\n$envFile = getenv('APP_ENV') ?: 'desarrollo';\n\n// Validar el entorno\n$validEnvs = ['desarrollo', 'produccion'];\nif (!in_array($envFile, $validEnvs)) {\n    die(\"Entorno no v\u00e1lido: $envFile\");\n}\n\n// Cargar el archivo .env seg\u00fan el entorno\n$dotenv = Dotenv::createImmutable(__DIR__, \".env.$envFile\");\n$dotenv-&gt;load();\n\n// Definir las variables cargadas desde .env\ndefine('BASE_URL', $_ENV['BASE_URL']);\n\n// Definir las variables de acceso a la BD\ndefine('DB_HOST', $_ENV['DB_HOST']);\ndefine('DB_USER', $_ENV['DB_USER']);\ndefine('DB_PASS', $_ENV['DB_PASSWORD']);\ndefine('DB_NAME', $_ENV['DB_NAME']);\n\nrequire_once('./controllers/Autoload.php');\n\n$autoload = new Autoload();\n\n$app = new Router();\n?&gt;\n</code></pre> <p>En este ejemplo:</p> <ul> <li>El archivo <code>index.php</code> se utiliza como el punto de entrada principal de la aplicaci\u00f3n.</li> <li>Utiliza la clase <code>Dotenv</code> para cargar las configuraciones del entorno.</li> <li>Define constantes para las variables de conexi\u00f3n a la base de datos.</li> <li>Carga la clase <code>Autoload</code> para la carga autom\u00e1tica de los controladores y modelos.</li> <li>Finalmente, instancia la clase <code>Router</code> para manejar las rutas de la aplicaci\u00f3n.</li> </ul> <ul> <li>Controlador: El controlador <code>Router.php</code> maneja la l\u00f3gica de enrutamiento y redirige a las vistas o controladores espec\u00edficos.</li> <li>Vista: Se cargan vistas espec\u00edficas como <code>home.php</code> o <code>404.php</code> seg\u00fan la ruta.</li> <li>Modelo: Los modelos no est\u00e1n directamente invocados en este archivo, pero el <code>Router</code> los utiliza seg\u00fan las necesidades.</li> </ul> <p>\u2b06\ufe0f Subir </p>"},{"location":"carpetas/","title":"\ud83d\udcc1 Estructura de Carpetas","text":"<p>\u2b05\ufe0f Volver</p>"},{"location":"carpetas/#estructura-de-carpetas","title":"\ud83d\udcc1 Estructura de Carpetas","text":"<p>La organizaci\u00f3n de las carpetas en un proyecto MVC es crucial para mantener un c\u00f3digo limpio, modular y f\u00e1cil de mantener. A continuaci\u00f3n, se describe la estructura utilizada en el proyecto MVC Tienda, con explicaciones de los directorios m\u00e1s importantes.</p>"},{"location":"carpetas/#estructura-general-del-proyecto","title":"\ud83d\udcc2 Estructura General del Proyecto","text":"<p>El proyecto MVC Tienda est\u00e1 organizado en varias carpetas principales que corresponden a los tres componentes del patr\u00f3n MVC y otros elementos esenciales. A continuaci\u00f3n, se describe cada secci\u00f3n.</p> Estructura Principal del Proyecto Descripci\u00f3nEjemplo de Estructura <p>La estructura del proyecto est\u00e1 compuesta por las siguientes carpetas y archivos principales:</p> <ul> <li><code>controllers/</code>: Contiene las clases que manejan la l\u00f3gica de la aplicaci\u00f3n.</li> <li><code>models/</code>: Contiene la l\u00f3gica relacionada con los datos, como consultas a la base de datos.</li> <li><code>views/</code>: Contiene los archivos que definen la interfaz del usuario.</li> <li><code>public/</code>: Contiene recursos p\u00fablicos como archivos CSS, JavaScript e im\u00e1genes.</li> <li><code>vendor/</code>: Incluye las dependencias de terceros gestionadas por Composer.</li> <li><code>index.php</code>: Punto de entrada de la aplicaci\u00f3n.</li> <li><code>.env</code>: Configuraci\u00f3n del entorno para variables sensibles.</li> </ul> <pre><code>c:/servidor/www/examen-final-tienda/\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 Router.php\n\u2502   \u251c\u2500\u2500 TiendaController.php\n\u2502   \u2514\u2500\u2500 ViewController.php\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 Model_crud.php\n\u251c\u2500\u2500 views/\n\u2502   \u251c\u2500\u2500 header.php\n\u2502   \u251c\u2500\u2500 footer.php\n\u2502   \u2514\u2500\u2500 home.php\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 styles.css\n\u2502   \u251c\u2500\u2500 js/\n\u2502   \u2502   \u2514\u2500\u2500 script.js\n\u251c\u2500\u2500 vendor/\n\u251c\u2500\u2500 index.php\n\u251c\u2500\u2500 .env\n\u2514\u2500\u2500 composer.json\n</code></pre>"},{"location":"estilos/","title":"\ud83c\udfa8 Estilos CSS y Bootstrap","text":"<p>\u2b05\ufe0f Volver a Inicio </p>"},{"location":"estilos/#estilos-css-y-bootstrap","title":"\ud83c\udfa8 Estilos CSS y Bootstrap","text":"<p>El proyecto utiliza un enfoque de dise\u00f1o de tema oscuro para proporcionar una experiencia visual moderna y coherente. Los estilos est\u00e1n organizados en varios archivos CSS que gestionan diferentes componentes, asegurando modularidad y reutilizaci\u00f3n.</p>"},{"location":"estilos/#uso-general-de-estilos","title":"\ud83c\udf1f Uso General de Estilos","text":""},{"location":"estilos/#organizacion-de-los-archivos-css","title":"\ud83d\udcc1 Organizaci\u00f3n de los Archivos CSS","text":"<p>Los archivos CSS est\u00e1n ubicados en la carpeta <code>./public/css/</code>, y cada uno est\u00e1 dedicado a aspectos espec\u00edficos del dise\u00f1o:</p> <ul> <li><code>colors_backgrounds.css</code>: Define los colores principales del fondo y del texto en el tema oscuro.</li> <li><code>alerts.css</code>: Estilos personalizados para mensajes de alerta.</li> <li><code>buttons_Confirmar.css</code>: Dise\u00f1os para botones de acciones principales y secundarias.</li> <li><code>cards.css</code> y <code>cards_SmartGrid.css</code>: Estilos para tarjetas y componentes relacionados.</li> <li><code>tables.css</code> y <code>table_SmartGrid.css</code>: Estilos para tablas, incluyendo la tabla interactiva SmartGrid.</li> <li><code>select_filter.css</code>: Estilos para los filtros din\u00e1micos en los formularios.</li> </ul>"},{"location":"estilos/#tema-oscuro","title":"\ud83c\udf0c Tema Oscuro","text":"<p>El proyecto utiliza un esquema de colores oscuros que mejora la legibilidad y minimiza la fatiga visual en condiciones de poca luz. El fondo es predominantemente negro o gris oscuro, mientras que los textos y elementos interactivos utilizan tonos claros para garantizar el contraste.</p>"},{"location":"estilos/#ejemplo-de-aplicacion-de-estilo-general","title":"\ud83c\udfa8 Ejemplo de Aplicaci\u00f3n de Estilo General","text":"Estilo General del Fondo y Texto C\u00f3digo CSS colors_backgrounds.css<pre><code>html, body {\n    background-color: #121212; /* Fondo oscuro */\n    color: #E0E0E0; /* Texto claro */\n    font-family: 'Roboto', sans-serif;\n}\n</code></pre> Resultado <ul> <li>Fondo: Un color oscuro (#121212) que minimiza la distracci\u00f3n.</li> <li>Texto: Un color claro (#E0E0E0) para garantizar un contraste legible.</li> <li>Fuente: <code>Roboto</code> como una fuente moderna y legible.</li> </ul>"},{"location":"estilos/#ejemplo-de-componentes","title":"\ud83d\udee0\ufe0f Ejemplo de Componentes","text":""},{"location":"estilos/#mensajes-de-alerta","title":"\ud83d\udd14 Mensajes de Alerta","text":"<p>Los mensajes de alerta son dise\u00f1ados para mostrar notificaciones o errores con un estilo distintivo.</p> Estilo de Alerta C\u00f3digo CSS alerts.css<pre><code>.alert-success {\n    background-color: #28a745; /* Verde para \u00e9xito */\n    color: white;\n    padding: 20px;\n    border-radius: 8px;\n}\n\n.alert-danger {\n    background-color: #dc3545; /* Rojo para errores */\n    color: white;\n    padding: 20px;\n    border-radius: 8px;\n}\n</code></pre> Resultado <ul> <li>Alertas \u00c9xito: Fondo verde brillante con texto blanco.</li> <li>Alertas Error: Fondo rojo con texto blanco.</li> </ul>"},{"location":"estilos/#tablas-interactivas","title":"\ud83d\udccb Tablas Interactivas","text":"<p>Las tablas son uno de los componentes clave del proyecto, especialmente en la visualizaci\u00f3n de datos.</p> Estilo de Tablas C\u00f3digo CSS table_SmartGrid.css<pre><code>.table-smartgrid {\n    background-color: #343a40; /* Fondo gris oscuro */\n    color: white; /* Texto blanco */\n    border-collapse: collapse;\n}\n\n.table-smartgrid th {\n    background-color: #333333; /* Fondo para encabezados */\n    color: #FFFFFF; /* Texto blanco */\n    font-weight: bold;\n}\n\n.table-smartgrid td {\n    background-color: #0f0f0f; /* Fondo para celdas */\n    color: #E0E0E0; /* Texto claro */\n}\n</code></pre> Resultado <ul> <li>Encabezados: Fondo gris oscuro con texto blanco en may\u00fasculas.</li> <li>Celdas: Fondo negro con texto claro para maximizar la legibilidad.</li> <li>Interactividad: Las filas cambian de color al pasar el cursor.</li> </ul>"},{"location":"estilos/#integracion-con-bootstrap","title":"\ud83d\udce6 Integraci\u00f3n con Bootstrap","text":"<p>Bootstrap se utiliza en combinaci\u00f3n con los estilos personalizados para aprovechar sus componentes predefinidos, como botones y modales, asegurando compatibilidad y rapidez en el dise\u00f1o.</p>"},{"location":"javascript/","title":"\ud83d\udcdc La Parte de JavaScript y AJAX","text":"<p>\u2b05\ufe0f Volver a Inicio </p>"},{"location":"javascript/#la-parte-de-javascript-y-ajax","title":"\ud83d\udcdc La Parte de JavaScript y AJAX","text":"<p>JavaScript se utiliza en este proyecto para manejar la interactividad y dinamismo en la aplicaci\u00f3n. Este lenguaje permite que las vistas respondan a las acciones del usuario sin necesidad de recargar la p\u00e1gina, proporcionando una experiencia m\u00e1s fluida y eficiente.</p> <p>En particular, este proyecto hace uso extensivo de AJAX para realizar solicitudes al servidor y manipular din\u00e1micamente el DOM con los datos devueltos. Adem\u00e1s, se ha implementado una clase personalizada (<code>SelectElementJS</code>) para la creaci\u00f3n din\u00e1mica de elementos HTML, como etiquetas <code>&lt;select&gt;</code>.</p>"},{"location":"javascript/#uso-general-de-javascript-en-el-proyecto","title":"\ud83c\udf1f Uso General de JavaScript en el Proyecto","text":"<p>El proyecto utiliza JavaScript para las siguientes tareas principales:</p> <ol> <li>Interactividad del Usuario:</li> <li>Escucha de eventos como <code>click</code> y <code>change</code> en botones, inputs y radio buttons.</li> <li> <p>Actualizaci\u00f3n din\u00e1mica del contenido en las vistas.</p> </li> <li> <p>Manipulaci\u00f3n del DOM:</p> </li> <li>Generaci\u00f3n din\u00e1mica de elementos HTML (por ejemplo, <code>&lt;select&gt;</code>).</li> <li> <p>Renderizaci\u00f3n de mensajes y tablas actualizadas.</p> </li> <li> <p>Solicitudes AJAX:</p> </li> <li>Comunicaci\u00f3n con el servidor para ejecutar operaciones espec\u00edficas sin recargar la p\u00e1gina.</li> <li>Actualizaci\u00f3n de datos en las vistas bas\u00e1ndose en las respuestas del servidor.</li> </ol>"},{"location":"javascript/#ejemplo-de-llamada-ajax","title":"\ud83d\udee0\ufe0f Ejemplo de Llamada AJAX","text":"Llamada AJAX para Filtrar Productos C\u00f3digo JS script_tienda.js<pre><code>fetch('index.php', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'X-Requested-With': 'XMLHttpRequest'\n    },\n    body: new URLSearchParams({\n        'views': 'tienda',\n        'crud': 'filter',\n        'r': 'tienda-filter',\n        'consulta': searchConsulta,\n        'field': searchField,\n        'value': searchValue,\n        'precio': precio,\n        'isPrecio': isPrecio\n    })\n})\n.then(response =&gt; response.json()) // Procesar la respuesta JSON\n.then(data =&gt; {\n    if (data.success) {\n        // Actualizar la tabla con los datos recibidos\n        tablaContainer.innerHTML = data.tablaHTML;\n\n        // Mostrar mensaje de \u00e9xito\n        const mensajeSuccess = `\n            &lt;strong&gt;\u00c9xito: &lt;/strong&gt; \n            ${data.msg01} \n            &lt;strong&gt; \"${data.msg02}\" &lt;/strong&gt;\n            ${data.msg03}\n        `;\n        mensajeStatus.innerHTML = htmlMessageZone('success', mensajeSuccess);\n    } else {\n        // Mostrar mensaje de error\n        mensajeStatus.innerHTML = htmlMessageZone('danger', data.msg01);\n    }\n})\n.catch(error =&gt; {\n    // Manejo de errores en caso de fallo en la solicitud AJAX\n    mensajeStatus.innerHTML = htmlMessageZone('danger', 'Error al procesar la solicitud.');\n});\n</code></pre> Explicaci\u00f3n <p>En este ejemplo, se realiza una llamada al servidor para filtrar productos en la tabla basada en los criterios seleccionados por el usuario: - M\u00e9todo <code>POST</code>: Se env\u00edan datos al servidor para procesar la solicitud. - Respuestas JSON: La respuesta del servidor se interpreta como JSON, y los datos recibidos se utilizan para actualizar din\u00e1micamente el DOM.</p>"},{"location":"javascript/#generacion-dinamica-de-elementos","title":"\u2728 Generaci\u00f3n Din\u00e1mica de Elementos","text":"<p>El proyecto incluye una clase personalizada, <code>SelectElementJS</code>, para generar din\u00e1micamente etiquetas <code>&lt;select&gt;</code>. Esta clase permite crear elementos con m\u00faltiples opciones y atributos seg\u00fan las necesidades de la aplicaci\u00f3n.</p> Uso de la Clase SelectElementJS C\u00f3digo JS SelectElementJS.js<pre><code>const selectElement = new SelectElementJS('idDynamicSelect', 'dynamicSelect', 'form-select', true);\nselectElement.setDefaultOption('Seleccione una opci\u00f3n...', 'default');\nselectElement.addOption('valor1', 'Opci\u00f3n 1');\nselectElement.addOption('valor2', 'Opci\u00f3n 2', true); // Opci\u00f3n seleccionada por defecto\n\n// Renderizar el &lt;select&gt; y a\u00f1adirlo al DOM\ndocument.getElementById('contenedorSelect').innerHTML = selectElement.render();\n</code></pre> Resultado <p>Este c\u00f3digo genera din\u00e1micamente un elemento <code>&lt;select&gt;</code> con las opciones especificadas y lo agrega al contenedor correspondiente en el DOM.</p>"},{"location":"javascript/#ejemplo-practico-recarga-de-pagina","title":"\ud83d\udda5\ufe0f Ejemplo Pr\u00e1ctico: Recarga de P\u00e1gina","text":"Funci\u00f3n para Recargar la P\u00e1gina C\u00f3digo JS reload.js<pre><code>function reloadPage(url) {\n    url = \"index.php?r=\" + url;\n    console.log('Redirigiendo a:', url);\n    setTimeout(function () {\n        window.location.href = url;\n    }, 3000);\n}\n</code></pre> Explicaci\u00f3n <p>Esta funci\u00f3n se utiliza para redirigir al usuario a una nueva p\u00e1gina despu\u00e9s de un breve retraso, proporcionando una experiencia controlada y fluida.</p>"},{"location":"javascript/#resumen-de-funcionalidades","title":"\ud83d\udccb Resumen de Funcionalidades","text":"<ol> <li>AJAX:</li> <li>Manejo eficiente de solicitudes al servidor y actualizaci\u00f3n del DOM en tiempo real.</li> <li> <p>Mejora la experiencia del usuario al evitar recargas completas de la p\u00e1gina.</p> </li> <li> <p>Dinamismo con <code>SelectElementJS</code>:</p> </li> <li> <p>Creaci\u00f3n flexible y reutilizable de elementos HTML din\u00e1micos, como <code>&lt;select&gt;</code>.</p> </li> <li> <p>Modularidad:</p> </li> <li>Los archivos JS est\u00e1n organizados seg\u00fan su funcionalidad (<code>reload.js</code>, <code>script_tienda.js</code>, etc.), lo que facilita el mantenimiento y la escalabilidad.</li> </ol>"},{"location":"model_crud/","title":"\ud83d\uddc2\ufe0f Componentes Espec\u00edficos del Modelo MVC. La clase Model_crud","text":"<p>\u2b05\ufe0f Volver a Inicio </p>"},{"location":"model_crud/#componentes-especificos-del-modelo-mvc-la-clase-model_crud","title":"\ud83d\uddc2\ufe0f Componentes Espec\u00edficos del Modelo MVC. La Clase <code>Model_crud</code>","text":"<p>Este apartado describe c\u00f3mo la clase <code>Model_crud</code> implementa operaciones generales de base de datos en el proyecto MVC Tienda. Esta clase se utiliza como base para crear modelos espec\u00edficos que interact\u00faan con vistas, controladores y la base de datos.</p>"},{"location":"model_crud/#funcion-de-la-clase-model_crud","title":"\ud83d\udccc Funci\u00f3n de la Clase <code>Model_crud</code>","text":"\u00bfQu\u00e9 es y c\u00f3mo funciona? Descripci\u00f3n <p>La clase <code>Model_crud</code> es una clase abstracta que proporciona una interfaz generalizada para las operaciones CRUD (Create, Read, Update, Delete). Utiliza MySQLi para realizar consultas preparadas de manera segura, minimizando riesgos de inyecci\u00f3n SQL.</p> Responsabilidades principales <ul> <li>Conexi\u00f3n a la base de datos: Maneja la apertura y cierre de la conexi\u00f3n.</li> <li>Consultas preparadas: Ejecuta consultas de forma segura utilizando m\u00e9todos como <code>execute_prepared_query</code> y <code>execute_prepared_select</code>.</li> <li>M\u00e9todos CRUD generalizados: Incluye m\u00e9todos como <code>insert</code>, <code>update</code>, <code>delete</code> y <code>get</code> para manejar datos.</li> </ul>"},{"location":"model_crud/#estructura-de-la-clase-model_crud","title":"\ud83c\udf1f Estructura de la Clase <code>Model_crud</code>","text":"C\u00f3digo principal C\u00f3digo Model_crud.php<pre><code>abstract class Model_crud {\n    private static $db_host = DB_HOST;\n    private static $db_user = DB_USER;\n    private static $db_pass = DB_PASS;\n    private static $db_name = DB_NAME;\n\n    protected $table = '';    // Nombre de la tabla\n    protected $column_id = ''; // Nombre de la columna clave\n\n    public function insert($data) { /* Inserci\u00f3n gen\u00e9rica */ }\n    public function update($id, $data) { /* Actualizaci\u00f3n gen\u00e9rica */ }\n    public function delete($id) { /* Eliminaci\u00f3n gen\u00e9rica */ }\n    public function get($id = null) { /* Recuperaci\u00f3n gen\u00e9rica */ }\n}\n</code></pre> Explicaci\u00f3n <p>Esta clase define m\u00e9todos gen\u00e9ricos para realizar operaciones en cualquier tabla. Las subclases especifican el nombre de la tabla (<code>$table</code>) y su clave primaria (<code>$column_id</code>).</p>"},{"location":"model_crud/#subclases-de-model_crud","title":"\ud83d\udd27 Subclases de <code>Model_crud</code>","text":"<p>Las subclases especializan el comportamiento de <code>Model_crud</code> para una tabla o vista espec\u00edfica. En este proyecto, la clase <code>TiendaController</code> hereda de <code>Model_crud</code> y opera sobre la vista <code>productos_fabricante</code>.</p> Subclase: <code>TiendaController</code> C\u00f3digo TiendaController.php<pre><code>class TiendaController extends Model_crud {\n    protected $table = 'productos_fabricante';\n    protected $column_id = 'rowid';\n\n    public function getValueFields($field) { /* Valores \u00fanicos */ }\n    public function filterTienda($query, $valor) { /* Filtro por texto */ }\n    public function filterTiendaPrecio($query, $operador, $precio) { /* Filtro por precio */ }\n}\n</code></pre> Explicaci\u00f3n <ul> <li><code>getValueFields($field)</code>: Obtiene valores \u00fanicos de una columna espec\u00edfica usando procedimientos almacenados.</li> <li><code>filterTienda($query, $valor)</code>: Filtra los resultados de la vista <code>productos_fabricante</code> con base en una consulta y un valor.</li> <li><code>filterTiendaPrecio($query, $operador, $precio)</code>: Aplica un filtro basado en el precio con operadores de comparaci\u00f3n (<code>&gt;</code>, <code>&lt;</code>, <code>=</code>).</li> </ul>"},{"location":"model_crud/#estructura-de-la-vista-productos_fabricante","title":"\ud83d\udcc2 Estructura de la Vista <code>productos_fabricante</code>","text":"Vista de base de datos C\u00f3digo SQL productos_fabricante<pre><code>CREATE VIEW productos_fabricante AS\nSELECT \n  ROW_NUMBER() OVER (ORDER BY a.nombre, b.nombre) AS rowid,\n  a.pk_codigo AS pk_fabricante, \n  a.nombre AS nombre_fabricante, \n  b.id_producto AS pk_producto, \n  b.nombre AS nombre_producto, \n  b.precio AS precio\nFROM fabricante AS a\nJOIN producto AS b ON b.fk_codigo = a.pk_codigo\nORDER BY nombre_fabricante, nombre_producto;\n</code></pre> Explicaci\u00f3n <ul> <li>Columna <code>rowid</code>: Identificador incremental \u00fanico generado para cada fila.</li> <li>Relaci\u00f3n <code>fabricante</code> y <code>producto</code>: Une ambas tablas para mostrar los datos combinados.</li> <li>Ordenamiento: Los resultados est\u00e1n organizados por nombre del fabricante y producto.</li> </ul> Ejemplo de datos"},{"location":"model_crud/#ejemplo-practico","title":"\ud83c\udf1f Ejemplo Pr\u00e1ctico","text":"Operaci\u00f3n CRUD: Filtrar productos por precio C\u00f3digo Ejemplo de filtrado por precio<pre><code>$tiendaController = new TiendaController();\n$productos = $tiendaController-&gt;filterTiendaPrecio(\n    \"SELECT * FROM productos_fabricante WHERE precio\", \"&gt;=\", 200\n);\n\nprint_r($productos);\n</code></pre> Salida esperada <pre><code>Array\n(\n    [0] =&gt; Array\n        (\n            [rowid] =&gt; 1\n            [pk_fabricante] =&gt; 1\n            [nombre_fabricante] =&gt; Asus\n            [pk_producto] =&gt; 6\n            [nombre_producto] =&gt; Monitor 24 LED Full HD\n            [precio] =&gt; 202\n        )\n    [1] =&gt; Array\n        (\n            [rowid] =&gt; 2\n            [pk_fabricante] =&gt; 1\n            [nombre_fabricante] =&gt; Asus\n            [pk_producto] =&gt; 7\n            [nombre_producto] =&gt; Monitor 27 LED Full HD\n            [precio] =&gt; 245.99\n        )\n)\n</code></pre> Explicaci\u00f3n <ul> <li>La consulta filtra productos con un precio mayor o igual a 200.</li> <li>Devuelve un arreglo asociativo con los productos que cumplen la condici\u00f3n.</li> </ul>"},{"location":"model_crud/#ventajas-de-la-implementacion","title":"\ud83e\udde9 Ventajas de la Implementaci\u00f3n","text":"<ol> <li>Reutilizaci\u00f3n: La clase <code>Model_crud</code> permite manejar cualquier tabla de manera gen\u00e9rica.</li> <li>Seguridad: Utiliza consultas preparadas para prevenir inyecciones SQL.</li> <li>Escalabilidad: Es sencillo a\u00f1adir nuevos m\u00e9todos a las subclases para funcionalidades espec\u00edficas.</li> <li>Modularidad: Se separan las responsabilidades del modelo, controlador y vista, manteniendo la estructura MVC.</li> </ol>"},{"location":"proteger/","title":"\ud83d\udd10 El Uso de los Ficheros .env","text":"<p>\u2b05\ufe0f Volver a Inicio </p>"},{"location":"proteger/#el-uso-de-los-ficheros-env","title":"\ud83d\udd10 El Uso de los Ficheros .env","text":"<p>La protecci\u00f3n de aplicaciones web es esencial para garantizar la seguridad de los datos y evitar vulnerabilidades que puedan ser explotadas por atacantes. En este proyecto, implementamos varias estrategias de protecci\u00f3n, incluyendo el uso de ficheros <code>.env</code> para gestionar configuraciones sensibles y un archivo <code>.gitignore</code> para evitar exponer informaci\u00f3n privada en sistemas de control de versiones.</p>"},{"location":"proteger/#importancia-de-la-proteccion-en-aplicaciones-web","title":"\ud83c\udf1f Importancia de la Protecci\u00f3n en Aplicaciones Web","text":"<p>Las aplicaciones web manejan datos sensibles, desde credenciales de base de datos hasta informaci\u00f3n personal de los usuarios. Es crucial: 1. Proteger Credenciales: Evitar la exposici\u00f3n de contrase\u00f1as y configuraciones cr\u00edticas en el c\u00f3digo fuente. 2. Evitar Vulnerabilidades: Minimizar el riesgo de ataques como inyecciones SQL, ataques XSS o accesos no autorizados. 3. Separar Entornos: Diferenciar configuraciones para desarrollo y producci\u00f3n para prevenir errores o accesos indebidos.</p>"},{"location":"proteger/#uso-de-ficheros-env","title":"\ud83d\udcdc Uso de Ficheros <code>.env</code>","text":"<p>En este proyecto, los ficheros <code>.env</code> contienen informaci\u00f3n sensible, como las credenciales de la base de datos y la URL base de la aplicaci\u00f3n. Aqu\u00ed se utilizan dos variantes: - <code>.env.desarrollo</code>: Configuraci\u00f3n para el entorno de desarrollo. - <code>.env.produccion</code>: Configuraci\u00f3n para el entorno de producci\u00f3n.</p> Ejemplo de <code>.env.desarrollo</code> <pre><code># Configuraci\u00f3n de la BD\nDB_HOST=localhost\nDB_NAME=tienda\nDB_USER=root\nDB_PASSWORD=\n\n# Configuraci\u00f3n de la aplicaci\u00f3n\nBASE_URL=http://examen-final-tienda.test\n</code></pre>"},{"location":"proteger/#como-funciona-en-este-proyecto","title":"\ud83d\udee0\ufe0f C\u00f3mo Funciona en Este Proyecto","text":"<ol> <li> <p>Instalaci\u00f3n de <code>phpdotenv</code> con Composer</p> <p>La biblioteca <code>phpdotenv</code> se utiliza para cargar autom\u00e1ticamente las variables de entorno definidas en los archivos <code>.env</code>. Esta herramienta facilita la configuraci\u00f3n y manejo de datos sensibles.</p> <p>Comando de Instalaci\u00f3n</p> <p>Ejecuta el siguiente comando en la ra\u00edz del proyecto para instalar <code>phpdotenv</code>:</p> <pre><code>composer require vlucas/phpdotenv\n</code></pre> </li> <li> <p>Carga del <code>.env</code>: En el archivo <code>index.php</code>, se utiliza la biblioteca <code>phpdotenv</code> para cargar las variables del archivo <code>.env</code> correspondiente al entorno actual:     <pre><code>use Dotenv\\Dotenv;\n\n$envFile = getenv('APP_ENV') ?: 'desarrollo';\n$dotenv = Dotenv::createImmutable(__DIR__, \".env.$envFile\");\n$dotenv-&gt;load();\n\ndefine('DB_HOST', $_ENV['DB_HOST']);\ndefine('DB_USER', $_ENV['DB_USER']);\ndefine('DB_PASS', $_ENV['DB_PASSWORD']);\ndefine('BASE_URL', $_ENV['BASE_URL']);\n</code></pre></p> </li> <li> <p>Separaci\u00f3n de Entornos:</p> <ul> <li>La variable <code>APP_ENV</code> determina si el entorno es de desarrollo o producci\u00f3n.</li> <li>Se carga din\u00e1micamente el archivo <code>.env</code> correspondiente, permitiendo que las configuraciones se mantengan separadas y seguras.</li> </ul> </li> </ol>"},{"location":"proteger/#uso-del-archivo-gitignore","title":"\ud83d\udee1\ufe0f Uso del Archivo <code>.gitignore</code>","text":"<p>El archivo <code>.gitignore</code> asegura que los ficheros sensibles, como <code>.env</code>, no se incluyan en el repositorio de control de versiones, evitando su exposici\u00f3n en plataformas como GitHub.</p> Ejemplo de <code>.gitignore</code> <pre><code># Ignorar archivos sensibles\n*.env*\n\n# Ignorar configuraciones espec\u00edficas del sistema operativo\n.DS_Store\nThumbs.db\n\n# Ignorar carpetas de logs y cach\u00e9\nlogs/\ncache/\nvendor/\npublic/tmp/\n</code></pre> <p>En este proyecto, el archivo <code>.gitignore</code>: 1. Protege Credenciales: Ignora los archivos <code>.env</code>. 2. Optimiza el Repositorio: Excluye archivos temporales, logs y carpetas generadas autom\u00e1ticamente (como <code>vendor/</code>). 3. Mantiene el Orden: Ignora configuraciones espec\u00edficas de editores de c\u00f3digo (<code>.vscode/</code>, <code>.idea/</code>).</p>"},{"location":"proteger/#ventajas-del-enfoque-env-sobre-configphp","title":"\ud83d\udd04 Ventajas del Enfoque <code>.env</code> Sobre <code>config.php</code>","text":""},{"location":"proteger/#uso-de-ficheros-env_1","title":"\ud83d\udcc2 Uso de Ficheros <code>.env</code>","text":"<ul> <li>Flexibilidad: Facilita la gesti\u00f3n de m\u00faltiples entornos (desarrollo, producci\u00f3n, pruebas).</li> <li>Seguridad: Evita que las credenciales se incluyan en el repositorio de control de versiones.</li> <li>Simplicidad: Centraliza las configuraciones sensibles en un solo lugar.</li> </ul>"},{"location":"proteger/#limitaciones-de-configphp","title":"\ud83d\udee0\ufe0f Limitaciones de <code>config.php</code>","text":"<ul> <li>Exposici\u00f3n Potencial: Si <code>config.php</code> no est\u00e1 bien protegido, podr\u00eda ser accesible desde el servidor web.</li> <li>Falta de Separaci\u00f3n: Mezclar configuraciones para diferentes entornos en un \u00fanico archivo puede ser complicado.</li> <li>Mantenimiento: Requiere actualizaciones manuales para cada entorno.</li> </ul> <p>En este proyecto, se prefiri\u00f3 el uso de <code>.env</code> por estas ventajas, junto con herramientas como <code>phpdotenv</code>, que hacen que la carga de configuraciones sea autom\u00e1tica y segura.</p>"},{"location":"proteger/#consideraciones-adicionales","title":"\ud83d\udcdd Consideraciones Adicionales","text":"<ol> <li>Asegurarse de Configurar el Archivo <code>.gitignore</code> Correctamente:<ul> <li>Verificar que los archivos <code>.env</code> y otros sensibles est\u00e9n excluidos del repositorio.</li> </ul> </li> <li>Proteger el Archivo <code>.env</code>:<ul> <li>Ajustar los permisos del sistema operativo para evitar accesos no autorizados.</li> </ul> </li> <li>Usar HTTPS en Producci\u00f3n:<ul> <li>En producci\u00f3n, asegurarse de que todas las comunicaciones sean seguras mediante HTTPS.</li> </ul> </li> </ol>"},{"location":"router/","title":"\ud83d\udd00 Interacci\u00f3n entre Componentes. Implementaci\u00f3n y el uso del Router","text":"<p>\u2b05\ufe0f Volver a Inicio </p>"},{"location":"router/#interaccion-entre-componentes-implementacion-y-el-uso-del-router","title":"\ud83d\udd00 Interacci\u00f3n entre Componentes. Implementaci\u00f3n y el uso del Router","text":"<p>En este apartado se detalla c\u00f3mo interact\u00faan los componentes del proyecto MVC Tienda, centr\u00e1ndonos en el flujo de informaci\u00f3n hacia el <code>Router</code> y su implementaci\u00f3n. El <code>Router</code> es el n\u00facleo encargado de interpretar las solicitudes y dirigirlas hacia las vistas correspondientes.</p>"},{"location":"router/#la-clase-router-el-corazon-de-la-aplicacion","title":"\ud83d\udccc La Clase Router: El Coraz\u00f3n de la Aplicaci\u00f3n","text":"\u00bfQu\u00e9 es el Router y cu\u00e1l es su funci\u00f3n? Descripci\u00f3n <p>El <code>Router</code> act\u00faa como el cerebro de la aplicaci\u00f3n. Su objetivo es recibir solicitudes de las variables <code>$_GET</code> y <code>$_POST</code>, procesarlas y cargar la vista adecuada. Adem\u00e1s, aplica filtrado a los datos para prevenir ataques como la inyecci\u00f3n de c\u00f3digo.</p> Diagrama de Flujo <pre><code>Solicitud (GET o POST) --&gt; Router --&gt; ViewController --&gt; Vista correspondiente\n</code></pre>"},{"location":"router/#flujo-de-informacion-hacia-el-router","title":"\ud83c\udf1f Flujo de Informaci\u00f3n hacia el Router","text":""},{"location":"router/#variables-_get-del-menu","title":"\ud83d\udee0\ufe0f Variables <code>$_GET</code> del Men\u00fa","text":"Variables <code>$_GET</code> Explicaci\u00f3n <p>Las variables <code>$_GET</code> se utilizan para determinar la ruta solicitada desde el men\u00fa de navegaci\u00f3n. Por ejemplo, cuando un usuario selecciona \"Inicio\", se env\u00eda la variable <code>r=home</code> al <code>Router</code>.</p> Ejemplo Enlace del men\u00fa<pre><code>&lt;a href=\"index.php?r=home\"&gt;Inicio&lt;/a&gt;\n</code></pre> Proceso en el Router Router.php<pre><code>$this-&gt;route = isset($_GET['r']) ? $_GET['r'] : 'home';\n</code></pre>"},{"location":"router/#variables-_post-de-las-vistas","title":"\ud83d\udee0\ufe0f Variables <code>$_POST</code> de las Vistas","text":"Variables <code>$_POST</code> Explicaci\u00f3n <p>Las variables <code>$_POST</code> se env\u00edan desde formularios o interacciones AJAX. Estas variables son procesadas por el <code>Router</code> para ejecutar acciones espec\u00edficas, como filtrar tablas o procesar formularios.</p> Ejemplo de formulario Formulario HTML<pre><code>&lt;form method=\"POST\" action=\"index.php\"&gt;\n    &lt;input type=\"hidden\" name=\"r\" value=\"tienda-filter\"&gt;\n    &lt;input type=\"text\" name=\"consulta\" placeholder=\"Buscar\"&gt;\n    &lt;button type=\"submit\"&gt;Filtrar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Proceso en el Router Router.php<pre><code>$this-&gt;route = isset($_POST['r']) ? $_POST['r'] : 'home';\n</code></pre>"},{"location":"router/#implementacion-del-router","title":"\ud83d\udd27 Implementaci\u00f3n del Router","text":"C\u00f3digo del Router C\u00f3digo Router.php<pre><code>class Router {\n    public $route;\n\n    public function __construct() {\n        $filtro = new FiltrarDatos();\n        $datos_get = $filtro-&gt;Filtrar($_GET);\n        $datos_post = $filtro-&gt;Filtrar($_POST);\n\n        $this-&gt;route = isset($datos_get['r']) \n                    ? $datos_get['r'] \n                    : (isset($datos_post['r']) ? $datos_post['r'] : 'home');\n\n        $controller = new ViewController();\n\n        switch ($this-&gt;route) {\n            case 'home':\n                $controller-&gt;load_view('home');\n                break;\n            case 'tienda':\n                // Filtrar o procesar datos de la vista tienda\n                $this-&gt;filtrarTabla($datos_post);\n                break;\n            default:\n                $controller-&gt;load_view('404');\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"router/#interaccion-entre-componentes","title":"\ud83e\udde9 Interacci\u00f3n entre Componentes","text":"<ol> <li>Men\u00fa de Navegaci\u00f3n (<code>$_GET</code>): Los enlaces del men\u00fa generan solicitudes que son capturadas por el <code>Router</code>.<ul> <li>Ejemplo: <code>index.php?r=home</code> carga la vista principal.</li> </ul> </li> <li>Vistas y Formularios (<code>$_POST</code>): Las interacciones del usuario en las vistas env\u00edan datos que el <code>Router</code> filtra y procesa.<ul> <li>Ejemplo: Un formulario de b\u00fasqueda env\u00eda datos al controlador correspondiente.</li> </ul> </li> <li>ViewController: El <code>Router</code> delega la tarea de cargar las vistas al <code>ViewController</code>.<ul> <li>Ejemplo: La ruta <code>home</code> carga <code>views/home.php</code>.</li> </ul> </li> </ol>"},{"location":"router/#consideraciones-de-seguridad","title":"\ud83c\udf10 Consideraciones de Seguridad","text":"\u00bfC\u00f3mo proteger el flujo de datos? Recomendaciones <ul> <li>Filtrar datos: Utiliza clases como <code>FiltrarDatos</code> para validar y limpiar las entradas.</li> <li>Evitar acceso directo: Aseg\u00farate de que solo <code>index.php</code> sea accesible directamente.</li> <li>Validar rutas: Implementa casos predeterminados para rutas no reconocidas, como <code>404</code>.</li> </ul>"},{"location":"router/#beneficios-de-este-enfoque","title":"\ud83c\udf1f Beneficios de este Enfoque","text":"<ol> <li>Centralizaci\u00f3n: Todas las rutas y vistas est\u00e1n controladas desde una sola clase.</li> <li>Seguridad: Los datos son filtrados antes de ser procesados.</li> <li>Flexibilidad: Es f\u00e1cil agregar nuevas rutas o vistas sin modificar el n\u00facleo de la aplicaci\u00f3n.</li> </ol>"},{"location":"tmp/","title":"Tmp","text":""},{"location":"tmp/#estructura-general-del-proyecto","title":"\ud83d\udcc2 Estructura General del Proyecto","text":"<p>El proyecto MVC Tienda est\u00e1 organizado en varias carpetas principales que corresponden a los tres componentes del patr\u00f3n MVC y otros elementos esenciales. A continuaci\u00f3n, se describe cada secci\u00f3n.</p> Estructura Principal del Proyecto Descripci\u00f3nEjemplo de Estructura <p>La estructura del proyecto est\u00e1 compuesta por las siguientes carpetas y archivos principales:</p> <ul> <li><code>controllers/</code>: Contiene las clases que manejan la l\u00f3gica de la aplicaci\u00f3n.</li> <li><code>models/</code>: Contiene la l\u00f3gica relacionada con los datos, como consultas a la base de datos.</li> <li><code>views/</code>: Contiene los archivos que definen la interfaz del usuario.</li> <li><code>public/</code>: Contiene recursos p\u00fablicos como archivos CSS, JavaScript e im\u00e1genes.</li> <li><code>vendor/</code>: Incluye las dependencias de terceros gestionadas por Composer.</li> <li><code>index.php</code>: Punto de entrada de la aplicaci\u00f3n.</li> <li><code>.env</code>: Configuraci\u00f3n del entorno para variables sensibles.</li> </ul> <pre><code>c:/servidor/www/examen-final-tienda/\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 Router.php\n\u2502   \u251c\u2500\u2500 TiendaController.php\n\u2502   \u2514\u2500\u2500 ViewController.php\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 Model_crud.php\n\u251c\u2500\u2500 views/\n\u2502   \u251c\u2500\u2500 header.php\n\u2502   \u251c\u2500\u2500 footer.php\n\u2502   \u2514\u2500\u2500 home.php\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 styles.css\n\u2502   \u251c\u2500\u2500 js/\n\u2502   \u2502   \u2514\u2500\u2500 script.js\n\u251c\u2500\u2500 vendor/\n\u251c\u2500\u2500 index.php\n\u251c\u2500\u2500 .env\n\u2514\u2500\u2500 composer.json\n</code></pre>"},{"location":"vistas/","title":"\ud83d\udc41\ufe0f Control de Vistas","text":"<p>\u2b05\ufe0f Volver a Inicio </p>"},{"location":"vistas/#control-de-vistas","title":"\ud83d\udc41\ufe0f Control de Vistas","text":"<p>En este apartado, exploraremos c\u00f3mo se implementa el control de vistas en el proyecto MVC Tienda. Este control incluye desde el archivo principal <code>index.php</code> hasta los componentes que integran las vistas como el encabezado (<code>header.php</code>) y el pie de p\u00e1gina (<code>footer.php</code>).</p>"},{"location":"vistas/#estructura-de-control-de-vistas","title":"\ud83d\udcc4 Estructura de Control de Vistas","text":"Arquitectura del Control de Vistas Descripci\u00f3n <p>El control de vistas permite gestionar la representaci\u00f3n de la interfaz de usuario de manera modular. Esto incluye:</p> <ul> <li>Activaci\u00f3n del Autoload y Router desde <code>index.php</code>: Maneja las peticiones y redirige a los controladores adecuados.</li> <li><code>Autoload.php</code>: Implementa la funci\u00f3n <code>spl_autoload_register</code> para cargar autom\u00e1ticamente las clases necesarias.</li> <li><code>Router.php</code>: Gestiona las rutas y determina qu\u00e9 vista cargar seg\u00fan la URL.</li> <li><code>ViewController.php</code>: Controlador principal de vistas, responsable de la l\u00f3gica para cargar los archivos correspondientes.</li> <li><code>header.php</code> y <code>footer.php</code>: Estructuras para el encabezado y pie de p\u00e1gina.</li> </ul>"},{"location":"vistas/#archivo-principal-indexphp","title":"\ud83c\udf1f Archivo Principal <code>index.php</code>","text":"Punto de entrada principal C\u00f3digo index.php<pre><code>&lt;?php\n    require_once('config.php');\n    require_once __DIR__ . '/vendor/autoload.php';\n\n    use Dotenv\\Dotenv;\n\n    $envFile = getenv('APP_ENV') ?: 'desarrollo';\n    $dotenv = Dotenv::createImmutable(__DIR__, \".env.$envFile\");\n    $dotenv-&gt;load();\n\n    require_once('./controllers/Autoload.php');\n    $autoload = new Autoload();\n\n    $app = new Router();\n?&gt;\n</code></pre> Explicaci\u00f3n <p>Este archivo act\u00faa como el punto de entrada de la aplicaci\u00f3n. Carga las configuraciones necesarias, las dependencias y utiliza el <code>Router</code> para manejar las solicitudes.</p>"},{"location":"vistas/#clase-autoloadphp","title":"\ud83d\udd04 Clase <code>Autoload.php</code>","text":"\u00bfQu\u00e9 hace <code>Autoload.php</code>? Descripci\u00f3n <p>Esta clase implementa la funci\u00f3n <code>spl_autoload_register</code> para cargar autom\u00e1ticamente las clases de modelos y controladores cuando son requeridas.</p> C\u00f3digo Autoload.php<pre><code>&lt;?php\nclass Autoload {\n    public function __construct() {\n        spl_autoload_register(function ($class_name) {\n            $models_path = './models/' . $class_name . '.php';\n            $controllers_path = './controllers/' . $class_name . '.php';\n\n            if (file_exists($models_path)) require_once($models_path);\n            if (file_exists($controllers_path)) require_once($controllers_path);\n        });\n    }\n}\n?&gt;\n</code></pre>"},{"location":"vistas/#clase-routerphp","title":"\ud83d\udd00 Clase <code>Router.php</code>","text":"Manejo de Rutas Descripci\u00f3n <p>La clase <code>Router</code> determina qu\u00e9 vista cargar seg\u00fan la URL o los datos recibidos por <code>GET</code> o <code>POST</code>. Tambi\u00e9n filtra los datos para evitar ataques.</p> C\u00f3digo Router.php<pre><code>&lt;?php\nclass Router {\n    public function __construct() {\n        $route = $_GET['r'] ?? 'home';\n        $controller = new ViewController();\n\n        switch ($route) {\n            case 'home':\n                $controller-&gt;load_view('home');\n                break;\n            default:\n                $controller-&gt;load_view('404');\n                break;\n        }\n    }\n}\n?&gt;\n</code></pre>"},{"location":"vistas/#clase-viewcontrollerphp","title":"\ud83d\udcc4 Clase <code>ViewController.php</code>","text":"Controlador de Vistas Descripci\u00f3n <p>Este controlador maneja la l\u00f3gica para cargar vistas espec\u00edficas seg\u00fan las rutas definidas en el <code>Router</code>.</p> C\u00f3digo ViewController.php<pre><code>&lt;?php\nclass ViewController {\n    public function load_view($view) {\n        include_once './views/header.php';\n        include_once \"./views/{$view}.php\";\n        include_once './views/footer.php';\n    }\n}\n?&gt;\n</code></pre>"},{"location":"vistas/#componentes-de-la-vista","title":"\ud83d\uddbc\ufe0f Componentes de la Vista","text":""},{"location":"vistas/#headerphp","title":"\ud83c\udf1f <code>header.php</code>","text":"Encabezado de las p\u00e1ginas C\u00f3digo header.php<pre><code>&lt;?php\n$template = '\n    &lt;!DOCTYPE html&gt;\n    &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;%s&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"./public/css/styles.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;header class=\"header\"&gt;\n            &lt;h1&gt;%s&lt;/h1&gt;\n        &lt;/header&gt;\n        &lt;main class=\"main\"&gt;\n';\nprintf($template, APP_TITLE, APP_TITLE);\n?&gt;\n</code></pre> Explicaci\u00f3n <p>El archivo <code>header.php</code> genera el encabezado HTML para todas las p\u00e1ginas, cargando los estilos necesarios y configurando el t\u00edtulo din\u00e1micamente.</p>"},{"location":"vistas/#footerphp","title":"\ud83c\udf1f <code>footer.php</code>","text":"Pie de p\u00e1gina de las vistas C\u00f3digo footer.php<pre><code>&lt;?php \nprint('\n        &lt;/main&gt;\n        &lt;footer class=\"footer\"&gt;\n            &lt;p&gt;\u00a9 2024 Tienda MVC. Todos los derechos reservados.&lt;/p&gt;\n        &lt;/footer&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n');\n?&gt;\n</code></pre> Explicaci\u00f3n <p>Este archivo completa la estructura HTML de la p\u00e1gina, a\u00f1adiendo un pie de p\u00e1gina b\u00e1sico con informaci\u00f3n de derechos reservados.</p>"},{"location":"vistas/#consideraciones","title":"\ud83c\udf10 Consideraciones","text":"<ol> <li>Modularidad: El uso de componentes como <code>header.php</code> y <code>footer.php</code> facilita la consistencia en el dise\u00f1o de la aplicaci\u00f3n.</li> <li>Cargadores Autom\u00e1ticos: <code>Autoload.php</code> asegura que las clases necesarias se carguen din\u00e1micamente, optimizando el flujo de trabajo.</li> <li>Gesti\u00f3n de Rutas: <code>Router.php</code> simplifica el manejo de solicitudes, conectando las rutas con las vistas correspondientes.</li> </ol>"},{"location":"blog/","title":"Blog","text":""}]}